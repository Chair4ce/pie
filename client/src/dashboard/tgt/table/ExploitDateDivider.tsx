import 'date-fns';
import * as React from 'react';
import { useEffect, useState } from 'react';
import classNames from 'classnames';
import { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';
import DateFnsUtils from '@date-io/date-fns';
import { createStyles, InputAdornment } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import styled from 'styled-components';
import { ExploitDateModel } from '../../../store/tgt/ExploitDateModel';
import { DeleteConfirmationModal } from '../../components/DeleteConfirmationModal';
import theme from '../../../resources/theme';
import { ExploitDatePostModel } from '../../../store/tgt/ExploitDatePostModel';
import { truncateAndConvertDateToUtc } from '../../../utils';
import { MiniTrashcanButton } from '../../../resources/icons/MiniTrashcanButton';
import DatePickerIcon from '../../../resources/icons/DatePickerIcon';

interface Props {
  rfiId: number;
  postExploitDate: (date: ExploitDatePostModel) => void;
  setAddDate: (addDate: boolean) => void;
  uKey: number
  deleteExploitDate: (exploitDate: ExploitDateModel) => void;
  hasTgts: boolean;
  exploitDateDisplay?: string;
  exploitDate?: ExploitDateModel;
  disabled: boolean;
  highlight?: boolean;
  className?: string;
}

const useStyles = makeStyles(() => createStyles(
  {
    '@global': {
      '.MuiPickersToolbar-toolbar': {
        background: '#000000',
      },
    },
    root: {
      height: 30,
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'flex-start',
      alignItems: 'center',
      width: 1212,
      maxWidth: 1212,
    },
    dateInput: {
      width: '280px',
      textAlign: 'center',
    },
    separator: {
      position: 'relative',
      zIndex: 2,
      marginTop: 0,
      bottom: 10,
      width: 1212,
      height: '2px',
      borderRadius: '4px',
      backgroundColor: '#0000FF',
    },
    dateInputField: {
      position: 'relative',
      bottom: 0,
    },
    icon: {
      color: '#0000FF',
    },
  }));

export const ExploitDateDivider: React.FC<Props> = props => {
  const classes = useStyles();

  const [selectedDate, setSelectedDate] = useState<Date|null>(null);
  const [displayModal, setDisplayModal] = useState(false);
  const [displayCalendar, setDisplayCalendar] = useState(props.exploitDate === undefined);
  const [highlighted, setHighlighted] = useState(true);

  useEffect(() => {
    if (props.highlight) {
      setHighlighted(true);
      setTimeout(() => {
        setHighlighted(false);
      }, 5000);
    } else {
      setHighlighted(false);
    }
  }, [props.highlight]);

  function isValidDate(date: Date): boolean {
    return Object.prototype.toString.call(date) !== '[object Date]' ? false
      : !(isNaN(date.getTime()) || date > new Date());
  }

  const createExploitDatePostModel = (date: Date): ExploitDatePostModel => {
    return new ExploitDatePostModel(
      props.exploitDate ? props.exploitDate.id : null,
      props.rfiId,
      truncateAndConvertDateToUtc(date),
    );
  };

  function handleChange(date: Date|null) {
    setSelectedDate(date);
    if (date !== null && isValidDate(date)) {
      props.postExploitDate(createExploitDatePostModel(date));
      props.setAddDate(false);
      if (document.activeElement instanceof HTMLElement) {
        document.activeElement.blur();
      }
    }
  }

  function handleDeleteClick() {
    if (!props.disabled) {
      if (props.hasTgts) {
        setDisplayModal(true);
      } else {
        deleteExploitDate();
      }
    }
  }

  function deleteExploitDate() {
    if (props.exploitDate) {
      props.deleteExploitDate(props.exploitDate);
      setDisplayModal(false);
    } else {
      props.setAddDate(false);
    }
  }

  return (
    <div className={classNames('exploit-date-divider', props.className, classes.root)} key={props.uKey}>
      <div className={classNames('exploit-date-divider--bar', highlighted ? 'highlighted' : null)}/>
      <div className={classNames('exploit-date-divider--box', highlighted ? 'highlighted-box' : null)}>
        <MuiPickersUtilsProvider
          utils={DateFnsUtils}>
          <div className={'date-container'}>
            <KeyboardDatePicker
              className={classNames(classes.dateInput, 'exploit-date-input')}
              InputProps={{
                endAdornment: (
                  <InputAdornment className={'delete-date'} onClick={handleDeleteClick} position={'end'}>
                    <MiniTrashcanButton
                      className={classNames('delete-date-trashcan', props.disabled ? 'disabled' : null)}
                      aria-label={'delete date'}
                      onClick={() => {
                      }}
                      tooltip={props.exploitDate ? 'Delete Exploit Date' : 'Cancel Add'}
                    />
                  </InputAdornment>
                ),
                disableUnderline: true,
              }}
              margin={'normal'}
              id={'date-picker-dialog' + (props.exploitDate ? props.exploitDate.exploitDate : '')}
              label={''}
              format={'MM/dd/yyyy'}
              placeholder={'MM/DD/YYYY'}
              value={(props.exploitDate ? props.exploitDateDisplay : selectedDate)}
              onChange={date => handleChange(date)}
              InputAdornmentProps={{
                position: 'start',
              }}
              keyboardIcon={
                <div className={props.disabled ? 'disabled' : undefined}>
                  <DatePickerIcon/>
                </div>
              }
              KeyboardButtonProps={{
                style: {backgroundColor: 'transparent'},
                disableRipple: true,
                disableFocusRipple: true,
              }}
              maxDate={new Date()}
              error={false}
              helperText={''}
              autoFocus={props.exploitDate === undefined}
              disabled={props.disabled}
              open={displayCalendar}
              onClose={() => setDisplayCalendar(false)}
              onOpen={() => setDisplayCalendar(true)}
            />
          </div>
        </MuiPickersUtilsProvider>
      </div>
      <DeleteConfirmationModal
        deletingItem={props.exploitDate ? props.exploitDate.exploitDate.format('MM/DD/YYYY') : ''}
        display={displayModal}
        setDisplay={setDisplayModal}
        handleYes={deleteExploitDate}
      />
    </div>
  );
};

export const StyledExploitDateDivider = styled(ExploitDateDivider)`
  font-weight: ${theme.font.weightBold};
  font-size: ${theme.font.sizeRegion};
  margin-bottom: 10px;
  
  input {
    text-align: center;
    font-weight: ${theme.font.weightBold};
  }
  
  .exploit-date-divider--box {
    width: 306px;
    height: 30px;
    border-bottom-left-radius: 30px;
    border-bottom-right-radius: 30px;
    border: 4px solid ${theme.color.regionDividerPrimary};
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    z-index: 1;
    box-shadow: 0 0 4px #000;
  }
  
  .exploit-date-divider--bar {
    margin-bottom: -4px;
    width: 1212px;
    height: 4px;
    border-bottom-left-radius: 4px;
    border-bottom-right-radius: 4px;
    background: radial-gradient(300px, ${theme.color.regionDividerPrimary}, ${theme.color.regionDividerSecondary});
    z-index: 2;
    box-shadow: -2px 2px 4px #000;
  }
  
  .highlighted {
    background: ${theme.color.dateDividerHighlight} !important;
  }
  
  .highlighted-box {
    border-color: ${theme.color.dateDividerHighlight} !important;
  }
  
  .date-container {
    margin-top: -6px;
  }
  
  .delete-date {
    width: 48px;
   
    svg {
      box-shadow: none;
      :hover {
        box-shadow: 0 0 6px #FFFFFF;
      }
      path {
        fill: ${theme.color.primaryButton} !important;
      }
    }
  }
  
  .exploit-date-input {
    svg {
      margin-top: -2px;
    }
  }
  
  .mat-ripple-element {
    display: none;
  }
`;
